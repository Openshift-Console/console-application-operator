package resourcemapper

import appsv1alpha1 "github.com/openshift-console/console-application-operator/api/v1alpha1"

const (
	// The type of the resource
	AppLabel = "app"
	// A unique name identifying the application, usually used if different from app.kubernetes.io/name
	AppInstanceLabel = "app.kubernetes.io/instance"
	// The name, reflecting component.
	AppNameLabel = "app.kubernetes.io/name"
	// This is the role/type of the component
	AppComponentLabel = "app.kubernetes.io/component"
	// The name of the top level software system this resource is part of
	AppPartOfLabel = "app.kubernetes.io/part-of"
	// The runtime to be used to bootstrap the component
	AppRuntimeLabel = "app.openshift.io/runtime"
	// The version of the runtime
	AppRuntimeVersion = "app.openshift.io/runtime-version"

	//Required for able to edit the resource from the Edit Forms on the Console UI.
	AnnotationGeneratedBy = "openshift.io/generated-by"
	// URI for the source code under version control
	AnnotationVCSURI = "app.openshift.io/vcs-uri"
	// Identifier for the version of the source code. Can be branch, tag or commit SHA for the application. If omitted master head of the default branch is assumed.
	AnnotationVCSRef = "app.openshift.io/vcs-ref"

	// Annotation to resolve the names of the images in the application
	AnnotationResolveNames = "alpha.image.policy.openshift.io/resolve-names"

	// Annotation to indicate that the host was generated by the console
	AnnotationHostGenerated = "openshift.io/host.generated"
)

// MergeLabels merges the default labels with the user labels.
func mergeLabels(maps ...map[string]string) map[string]string {
	mergedLabels := make(map[string]string)
	for _, annotations := range maps {
		for key, value := range annotations {
			mergedLabels[key] = value
		}
	}
	return mergedLabels
}

// MergeAnnotations merges the default annotations with the user annotations.
func mergeAnnotations(maps ...map[string]string) map[string]string {
	mergedAnnotations := make(map[string]string)
	for _, annotations := range maps {
		for key, value := range annotations {
			mergedAnnotations[key] = value
		}
	}
	return mergedAnnotations
}

func defaultLabels(consoleApplication *appsv1alpha1.ConsoleApplication) map[string]string {
	return map[string]string{
		AppLabel:          consoleApplication.ObjectMeta.Name,
		AppInstanceLabel:  consoleApplication.ObjectMeta.Name,
		AppNameLabel:      consoleApplication.ObjectMeta.Name,
		AppComponentLabel: consoleApplication.ObjectMeta.Name,
		AppPartOfLabel:    consoleApplication.Spec.ApplicationName,
		AppRuntimeLabel:   consoleApplication.Spec.BuildConfiguration.BuilderImage.Image,
		AppRuntimeVersion: consoleApplication.Spec.BuildConfiguration.BuilderImage.Tag,
	}
}

func defaultAnnotations(consoleApplication *appsv1alpha1.ConsoleApplication) map[string]string {
	return map[string]string{
		AnnotationGeneratedBy: "OpenShiftWebConsole",
		AnnotationVCSURI:      consoleApplication.Spec.Git.Url,
		AnnotationVCSRef:      consoleApplication.Spec.Git.Reference,
	}
}
